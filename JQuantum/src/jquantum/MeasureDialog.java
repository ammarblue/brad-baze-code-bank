/*
 * MeasureDialog.java - Dialog class of the jQuantum computer simulator
 *
 * Copyright (C) 2004-2008 Andreas de Vries
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses
 * or write to the Free Software Foundation,Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA 02110-1301  USA
 */
package jquantum;

import java.util.Properties;
import javax.swing.*;

/**
 * This class enables a dialog frame to set measurement of a quantum circuit.
 * 
 * @author Andreas de Vries
 * @version 1.3
 */
public class MeasureDialog extends javax.swing.JDialog {
	private static final long serialVersionUID = 1283833894;
	private Properties bundle;
	/** Flag indicating whether the <i>x</i>-register is chosen to be measured. */
	public boolean xRegisterChosen = true;
	/** Flag indicating whether the <i>y</i>-register is chosen to be measured. */
	public boolean yRegisterChosen = false;
	/** Flag indicating whether a single qubit is chosen to be measured. */
	public boolean qubitChosen = false;
	/**
	 * Flag indicating whether a single qubit of the <i>x</i>-register is chosen
	 * to be measured.
	 */
	public boolean xQubitChosen = true;
	/**
	 * Flag indicating whether a single qubit of the <i>y</i>-register is chosen
	 * to be measured.
	 */
	public boolean yQubitChosen = false;
	public int qubit;

	private int xRegisterSize;
	private int yRegisterSize;

	/** Flag indicating whether the cancel button has been pressed. */
	public boolean cancelButtonClicked = false;

	/** Creates new form MeasureDialog */
	public MeasureDialog(java.awt.Frame parent, boolean modal,
			Properties bundle, int xRegisterSize, int yRegisterSize) {
		super(parent, modal);
		this.bundle = bundle;

		this.xRegisterSize = xRegisterSize;
		this.yRegisterSize = yRegisterSize;

		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			if (UIManager.getSystemLookAndFeelClassName().equals(
					"javax.swing.plaf.metal.MetalLookAndFeel")) {
				UIManager
						.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
			}
		} catch (Exception e) {
			// System.err.println( "Look & Feel Error: " + e.toString() );
		}

		initComponents();

		xRadioButton.setText("<html><i>x</i>-"
				+ bundle.getProperty("Register.text") + "</html>");
		yRadioButton.setText("<html><i>y</i>-"
				+ bundle.getProperty("Register.text") + "</html>");
		xQubitRadioButton.setText("<html><i>x</i>-"
				+ bundle.getProperty("Register.text") + "</html>");
		yQubitRadioButton.setText("<html><i>y</i>-"
				+ bundle.getProperty("Register.text") + "</html>");
		if (yRegisterSize == 0) {
			yRadioButton.setEnabled(false);
			yQubitRadioButton.setEnabled(false);
		}
		questionLabel.setText(bundle
				.getProperty("MeasureDialog.questionLabel.text")); // "Messung von ...");
		qubitRadioButton.setText(bundle
				.getProperty("MeasureDialog.qubitRadioButton.text"));
		qubitLabel.setText(bundle.getProperty("MeasureDialog.qubitLabel.text"));
		okButton.setText(bundle.getProperty("okButton.text"));
		cancelButton.setText(bundle.getProperty("cancelButton.text"));

		pack();

		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		setLocation((screenSize.width - getSize().width) / 2,
				(screenSize.height - getSize().height) / 2);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		buttonGroup = new javax.swing.ButtonGroup();
		qubitbuttonGroup = new javax.swing.ButtonGroup();
		inputPanel = new javax.swing.JPanel();
		questionLabel = new javax.swing.JLabel();
		measurePanel = new javax.swing.JPanel();
		xRadioButton = new javax.swing.JRadioButton();
		yRadioButton = new javax.swing.JRadioButton();
		qubitRadioButton = new javax.swing.JRadioButton();
		qubitPanel = new javax.swing.JPanel();
		qubitLabel = new javax.swing.JLabel();
		qubitTextField = new javax.swing.JTextField();
		qubitRegisterPanel = new javax.swing.JPanel();
		xQubitRadioButton = new javax.swing.JRadioButton();
		yQubitRadioButton = new javax.swing.JRadioButton();
		buttonPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();

		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		inputPanel.setLayout(new java.awt.BorderLayout(0, 10));

		questionLabel.setText("Measure ...");
		inputPanel.add(questionLabel, java.awt.BorderLayout.NORTH);

		measurePanel.setLayout(new java.awt.GridLayout(3, 1));

		xRadioButton.setSelected(true);
		xRadioButton.setText("<html><i>x</i>-Register</html>");
		buttonGroup.add(xRadioButton);
		xRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xRadioButtonActionPerformed(evt);
			}
		});

		measurePanel.add(xRadioButton);

		yRadioButton.setText("<html><i>y</i>-Register</html>");
		buttonGroup.add(yRadioButton);
		yRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				yRadioButtonActionPerformed(evt);
			}
		});

		measurePanel.add(yRadioButton);

		qubitRadioButton.setText("single qubit");
		buttonGroup.add(qubitRadioButton);
		qubitRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				qubitRadioButtonActionPerformed(evt);
			}
		});

		measurePanel.add(qubitRadioButton);

		inputPanel.add(measurePanel, java.awt.BorderLayout.CENTER);

		qubitPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		qubitPanel.setBorder(new javax.swing.border.EtchedBorder());
		qubitLabel.setText("single qubit: ");
		qubitPanel.add(qubitLabel);

		qubitTextField.setColumns(2);
		qubitTextField.setEnabled(false);
		qubitTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				qubitTextFieldActionPerformed(evt);
			}
		});

		qubitPanel.add(qubitTextField);

		qubitRegisterPanel.setLayout(new java.awt.BorderLayout());

		xQubitRadioButton.setSelected(true);
		xQubitRadioButton.setText("<html><i>x</i>-register</html>");
		qubitbuttonGroup.add(xQubitRadioButton);
		xQubitRadioButton.setEnabled(false);
		qubitRegisterPanel.add(xQubitRadioButton, java.awt.BorderLayout.NORTH);

		yQubitRadioButton.setText("<html><i>y</i>-register</html>");
		qubitbuttonGroup.add(yQubitRadioButton);
		yQubitRadioButton.setEnabled(false);
		qubitRegisterPanel.add(yQubitRadioButton, java.awt.BorderLayout.SOUTH);

		qubitPanel.add(qubitRegisterPanel);

		inputPanel.add(qubitPanel, java.awt.BorderLayout.SOUTH);

		getContentPane().add(inputPanel, java.awt.BorderLayout.CENTER);

		okButton.setText(" OK ");
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		buttonPanel.add(okButton);

		cancelButton.setText(" Cancel ");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		buttonPanel.add(cancelButton);

		getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

		jLabel1.setText(" ");
		getContentPane().add(jLabel1, java.awt.BorderLayout.WEST);

		pack();
	}// GEN-END:initComponents

	private void qubitRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_qubitRadioButtonActionPerformed
		qubitTextField.setEnabled(true);
		xQubitRadioButton.setEnabled(true);
		if (yRegisterSize > 0) {
			yQubitRadioButton.setEnabled(true);
		}
	}// GEN-LAST:event_qubitRadioButtonActionPerformed

	private void qubitTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_qubitTextFieldActionPerformed
		setValues();
	}// GEN-LAST:event_qubitTextFieldActionPerformed

	private void yRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_yRadioButtonActionPerformed
		qubitTextField.setEnabled(false);
		xQubitRadioButton.setEnabled(false);
		yQubitRadioButton.setEnabled(false);
	}// GEN-LAST:event_yRadioButtonActionPerformed

	private void xRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_xRadioButtonActionPerformed
		qubitTextField.setEnabled(false);
		xQubitRadioButton.setEnabled(false);
		yQubitRadioButton.setEnabled(false);
	}// GEN-LAST:event_xRadioButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		cancelButtonClicked = true;
		setVisible(false);
		removeAll();
		dispose();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
		setValues();
	}// GEN-LAST:event_okButtonActionPerformed

	private void setValues() {
		cancelButtonClicked = false;
		xRegisterChosen = xRadioButton.isSelected();
		yRegisterChosen = yRadioButton.isSelected();
		qubitChosen = qubitRadioButton.isSelected();
		xQubitChosen = xQubitRadioButton.isSelected();
		yQubitChosen = yQubitRadioButton.isSelected();

		try {
			if (qubitChosen) {
				qubit = Integer.parseInt(qubitTextField.getText());
				boolean error;
				error = qubit < 0;
				error |= xQubitChosen && qubit > xRegisterSize;
				error |= yQubitChosen && qubit > yRegisterSize;
				if (error)
					throw new NumberFormatException();
			}
			setVisible(false);
		} catch (Exception e) {
			int limit;
			if (xQubitChosen)
				limit = xRegisterSize;
			else
				limit = yRegisterSize;
			String message = bundle.getProperty("MeasureDialog.errorMessage")
					+ ": \u2265 0, \u2264 " + limit;
			JOptionPane.showMessageDialog(null, message);
		}
	}

	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_closeDialog
		cancelButtonClicked = true;
		setVisible(false);
		removeAll();
		dispose();
	}// GEN-LAST:event_closeDialog

	/*
	 * public static void main(String args[]) {
	 * java.awt.EventQueue.invokeLater(new Runnable() { public void run() {
	 * String language = "fr"; //java.util.Locale.getDefault().getLanguage();
	 * java.util.Properties bundle = new java.util.Properties(); try {
	 * System.out.print("Try to load " + "/jquantum/Bundle_" + language +
	 * ".xml ...");
	 * bundle.loadFromXML(getClass().getResourceAsStream("/jquantum/Bundle_" +
	 * language + ".xml")); System.out.println(" successfully!"); }
	 * catch(Exception e) { try {
	 * bundle.loadFromXML(getClass().getResourceAsStream
	 * ("/jquantum/Bundle_en.xml"));
	 * System.out.println(" but loaded /jquantum/Bundle_en.xml!"); } catch
	 * (Exception e2) { e2.printStackTrace(); } } new MeasureDialog(new
	 * javax.swing.JFrame(), true, bundle, 8, 4).setVisible(true); } }); } //
	 */

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup buttonGroup;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel inputPanel;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel measurePanel;
	private javax.swing.JButton okButton;
	private javax.swing.JLabel qubitLabel;
	private javax.swing.JPanel qubitPanel;
	private javax.swing.JRadioButton qubitRadioButton;
	private javax.swing.JPanel qubitRegisterPanel;
	private javax.swing.JTextField qubitTextField;
	private javax.swing.ButtonGroup qubitbuttonGroup;
	private javax.swing.JLabel questionLabel;
	private javax.swing.JRadioButton xQubitRadioButton;
	private javax.swing.JRadioButton xRadioButton;
	private javax.swing.JRadioButton yQubitRadioButton;
	private javax.swing.JRadioButton yRadioButton;
	// End of variables declaration//GEN-END:variables

}

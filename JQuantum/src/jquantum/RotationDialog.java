/*
 * GateDialog.java - Dialog class of the jQuantum computer simulator
 *
 * Copyright (C) 2004-2008 Andreas de Vries
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses
 * or write to the Free Software Foundation,Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA 02110-1301  USA
 */
package jquantum;

import java.util.Properties;
import javax.swing.*;

/**
 * This class creates a dialog frame to input a rotation gate for the jQuantum
 * computer simulator.
 * 
 * @author Andreas de Vries
 * @version $Id: RotationDialog.java,v 1.2 2007/01/11 vriesa $
 */
public class RotationDialog extends javax.swing.JDialog {
	private static final long serialVersionUID = 1810411142;
	private Properties bundle;
	private jQuantum parent;
	public int numberOfControlQubits = 1;
	/** array of the control qubit indices. */
	public int[] qubits;
	public int targetQubit = 2;
	public boolean yRegisterChosen = false;
	public String axis = "x";
	/** rotation angle as integer part of pi. */
	public int phiAsPartOfPi = 4;

	public boolean cancelButtonClicked = false;

	/** Creates new form RotationDialog */
	public RotationDialog(jQuantum parent, boolean modal, Properties bundle) {
		super(parent, modal);
		this.bundle = bundle;
		this.parent = parent;

		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			if (UIManager.getSystemLookAndFeelClassName().equals(
					"javax.swing.plaf.metal.MetalLookAndFeel")) {
				UIManager
						.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
			}
		} catch (Exception e) {
			// System.err.println( "Look & Feel Error: " + e.toString() );
		}

		initComponents();
		numberOfControlQubits = cNumberComboBox.getSelectedIndex();
		drawControlAlternatives();
		phiComboBox.setSelectedIndex(phiAsPartOfPi - 1);
		drawControlQubitPanel(numberOfControlQubits);

		setTitle(bundle.getProperty("RotationDialog.title.text"));
		controlInputPanel.setBorder(new javax.swing.border.TitledBorder(bundle
				.getProperty("RotationDialog.controlInputPanel.border.text")));
		cNumberLabel.setText(bundle
				.getProperty("RotationDialog.cNumberLabel.text"));
		targetInputPanel.setBorder(new javax.swing.border.TitledBorder(bundle
				.getProperty("RotationDialog.targetInputPanel.border.text")));
		targetLabel.setText(bundle.getProperty("qubitIndex.text") + ":");
		xRadioButton.setText("<html><i>x</i>-"
				+ bundle.getProperty("Register.text") + "</html>");
		yRadioButton.setText("<html><i>y</i>-"
				+ bundle.getProperty("Register.text") + "</html>");
		okButton.setText(bundle.getProperty("okButton.text"));
		cancelButton.setText(bundle.getProperty("cancelButton.text"));

		pack();

		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		setLocation((screenSize.width - getSize().width) / 2,
				(screenSize.height - getSize().height) / 2);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		buttonGroup = new javax.swing.ButtonGroup();
		inputPanel = new javax.swing.JPanel();
		rotationPanel = new javax.swing.JPanel();
		rPanel = new javax.swing.JPanel();
		rLabel = new javax.swing.JLabel();
		axisPanel = new javax.swing.JPanel();
		dummyLabel = new javax.swing.JLabel();
		axisComboBox = new javax.swing.JComboBox();
		rotationPanel2 = new javax.swing.JPanel();
		openBracketLabel = new javax.swing.JLabel();
		phiComboBox = new javax.swing.JComboBox();
		eqLabel = new javax.swing.JLabel();
		rotationPanel3 = new javax.swing.JPanel();
		openbracketLabel = new javax.swing.JLabel();
		matrixPanel = new javax.swing.JPanel();
		jLabel11 = new javax.swing.JLabel();
		jLabel12 = new javax.swing.JLabel();
		jLabel21 = new javax.swing.JLabel();
		jLabel22 = new javax.swing.JLabel();
		closeBracketLabel = new javax.swing.JLabel();
		qubitInputPanel = new javax.swing.JPanel();
		controlInputPanel = new javax.swing.JPanel();
		cNumberLabel = new javax.swing.JLabel();
		cNumberComboBox = new javax.swing.JComboBox();
		controlInputPanel2 = new javax.swing.JPanel();
		targetInputPanel = new javax.swing.JPanel();
		targetLabel = new javax.swing.JLabel();
		targetTextField = new javax.swing.JTextField();
		radioPanel = new javax.swing.JPanel();
		xRadioButton = new javax.swing.JRadioButton();
		yRadioButton = new javax.swing.JRadioButton();
		buttonPanel = new javax.swing.JPanel();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		setTitle("Rotation Input");
		addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		inputPanel.setLayout(new java.awt.BorderLayout());

		rotationPanel.setLayout(new java.awt.FlowLayout(
				java.awt.FlowLayout.LEFT));

		rotationPanel.setPreferredSize(new java.awt.Dimension(450, 78));
		rPanel.setLayout(new java.awt.BorderLayout());

		rLabel.setFont(new java.awt.Font("Dialog", 0, 24));
		rLabel.setText("<html><i>R</i></html>");
		rPanel.add(rLabel, java.awt.BorderLayout.CENTER);

		axisPanel.setLayout(new java.awt.GridLayout(2, 1));

		dummyLabel.setText(" ");
		axisPanel.add(dummyLabel);

		axisComboBox.setFont(new java.awt.Font("Lucida Grande", 2, 12));
		axisComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "x", "y", "z" }));
		axisComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				axisComboBoxActionPerformed(evt);
			}
		});

		axisPanel.add(axisComboBox);

		rPanel.add(axisPanel, java.awt.BorderLayout.EAST);

		rotationPanel.add(rPanel);

		openBracketLabel.setFont(new java.awt.Font("Dialog", 0, 24));
		openBracketLabel.setText("(");
		rotationPanel2.add(openBracketLabel);

		phiComboBox.setFont(new java.awt.Font("Dialog", 0, 14));
		phiComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
				"<html>&#960;</html>", "<html>&#960;/2</html>",
				"<html>&#960;/3</html>", "<html>&#960;/4</html>",
				"<html>&#960;/5</html>", "<html>&#960;/6</html>" }));
		phiComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				phiComboBoxActionPerformed(evt);
			}
		});

		rotationPanel2.add(phiComboBox);

		eqLabel.setFont(new java.awt.Font("Dialog", 0, 24));
		eqLabel.setText(") =");
		rotationPanel2.add(eqLabel);

		rotationPanel.add(rotationPanel2);

		openbracketLabel.setFont(new java.awt.Font("Dialog", 0, 48));
		openbracketLabel.setText("(");
		rotationPanel3.add(openbracketLabel);

		matrixPanel.setLayout(new java.awt.GridLayout(2, 2, 5, 5));

		jLabel11.setText("<html>cos(<i>&#966;</i>/2)</html>");
		matrixPanel.add(jLabel11);

		jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel12.setText("<html>-i sin(<i>&#966;</i>/2)</html>");
		matrixPanel.add(jLabel12);

		jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel21.setText("<html>-i sin(<i>&#966;</i>/2)</html>");
		matrixPanel.add(jLabel21);

		jLabel22.setText("<html>cos(<i>&#966;</i>/2)</html>");
		matrixPanel.add(jLabel22);

		rotationPanel3.add(matrixPanel);

		closeBracketLabel.setFont(new java.awt.Font("Dialog", 0, 48));
		closeBracketLabel.setText(")");
		rotationPanel3.add(closeBracketLabel);

		rotationPanel.add(rotationPanel3);

		inputPanel.add(rotationPanel, java.awt.BorderLayout.NORTH);

		qubitInputPanel.setLayout(new java.awt.BorderLayout());

		controlInputPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Control qubit(s)"));
		cNumberLabel.setText("Number: ");
		controlInputPanel.add(cNumberLabel);

		cNumberComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "1", "2", "3", "4" }));
		cNumberComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cNumberComboBoxActionPerformed(evt);
			}
		});

		controlInputPanel.add(cNumberComboBox);

		controlInputPanel.add(controlInputPanel2);

		qubitInputPanel.add(controlInputPanel, java.awt.BorderLayout.NORTH);

		targetInputPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Target qubit"));
		targetLabel.setText(" qubit index:");
		targetInputPanel.add(targetLabel);

		targetTextField.setColumns(2);
		targetTextField.setText("2");
		targetTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				targetTextFieldActionPerformed(evt);
			}
		});

		targetInputPanel.add(targetTextField);

		qubitInputPanel.add(targetInputPanel, java.awt.BorderLayout.SOUTH);

		inputPanel.add(qubitInputPanel, java.awt.BorderLayout.CENTER);

		radioPanel.setLayout(new java.awt.BorderLayout());

		buttonGroup.add(xRadioButton);
		xRadioButton.setSelected(true);
		xRadioButton.setText("<html><i>x</i>-Register</html>");
		xRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		xRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xRadioButtonActionPerformed(evt);
			}
		});

		radioPanel.add(xRadioButton, java.awt.BorderLayout.NORTH);

		buttonGroup.add(yRadioButton);
		yRadioButton.setText("<html><i>y</i>-Register</html>");
		yRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		yRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				yRadioButtonActionPerformed(evt);
			}
		});

		radioPanel.add(yRadioButton, java.awt.BorderLayout.SOUTH);

		inputPanel.add(radioPanel, java.awt.BorderLayout.SOUTH);

		getContentPane().add(inputPanel, java.awt.BorderLayout.CENTER);

		okButton.setText(" OK ");
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		buttonPanel.add(okButton);

		cancelButton.setText(" Cancel ");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		buttonPanel.add(cancelButton);

		getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void cNumberComboBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cNumberComboBoxActionPerformed
		numberOfControlQubits = cNumberComboBox.getSelectedIndex();
		drawControlQubitPanel(numberOfControlQubits);
	}// GEN-LAST:event_cNumberComboBoxActionPerformed

	private void phiComboBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_phiComboBoxActionPerformed
		writeMatrix();
	}// GEN-LAST:event_phiComboBoxActionPerformed

	private void drawControlQubitPanel(int n) {
		controlInputPanel2.removeAll();
		qubits = new int[n + 1]; // qubits contains the target qubit!
		for (int i = 0; i < qubits.length - 1; i++) {
			qubits[i] = i + 1;
		}

		if (qubits.length > 1) {
			String borderTitle = bundle.getProperty("controlQubit.text");
			if (qubits.length > 2)
				borderTitle += "s";
			controlInputPanel.setBorder(new javax.swing.border.TitledBorder(
					borderTitle));
		}

		controlInputPanel2.setLayout(new java.awt.GridLayout(qubits.length - 1,
				1));
		qubitPanel = new javax.swing.JPanel[qubits.length];
		qubitLabel = new javax.swing.JLabel();
		qubitLabel.setText("qubit index: ");
		qubitTextField = new JTextField[qubits.length - 1];
		for (int i = 0; i < qubits.length - 1; i++) {
			qubitPanel[i] = new javax.swing.JPanel();

			qubitLabel = new javax.swing.JLabel();
			qubitLabel.setText(bundle.getProperty("qubitIndex.text") + ": ");
			qubitPanel[i].add(qubitLabel);

			qubitTextField[i] = new javax.swing.JTextField();
			qubitTextField[i].setColumns(3);
			qubitTextField[i].setText("" + qubits[i]);

			qubitTextField[i]
					.addActionListener(new java.awt.event.ActionListener() {
						public void actionPerformed(
								java.awt.event.ActionEvent evt) {
							qubitTextFieldActionPerformed(evt);
						}
					});

			qubitPanel[i].add(qubitTextField[i]);

			controlInputPanel2.add(qubitPanel[i]);
		}

		targetQubit = qubits.length;
		targetTextField.setText(Integer.toString(targetQubit));
		pack();

	}

	private void targetTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_targetTextFieldActionPerformed
		try {
			targetQubit = Integer.parseInt(targetTextField.getText());
			setValues();
		} catch (Exception e) {
			String title = bundle.getProperty("errorMessage.title.text");
			String message = bundle
					.getProperty("RotationDialog.errorMessage_1");
			JOptionPane.showMessageDialog(this, message, title,
					JOptionPane.ERROR_MESSAGE);
			targetTextField.setText("" + targetQubit);
		}
	}// GEN-LAST:event_targetTextFieldActionPerformed

	private void axisComboBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_axisComboBoxActionPerformed
		writeMatrix();
	}// GEN-LAST:event_axisComboBoxActionPerformed

	private void yRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_yRadioButtonActionPerformed
		yRegisterChosen = yRadioButton.isSelected();
		drawControlAlternatives();
	}// GEN-LAST:event_yRadioButtonActionPerformed

	private void xRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_xRadioButtonActionPerformed
		yRegisterChosen = yRadioButton.isSelected();
		drawControlAlternatives();
	}// GEN-LAST:event_xRadioButtonActionPerformed

	private void qubitTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
		setValues();
	}

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		cancelButtonClicked = true;
		setVisible(false);
		removeAll();
		dispose();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_okButtonActionPerformed
		setValues();
	}// GEN-LAST:event_okButtonActionPerformed

	public int[] getQubits() {
		return qubits;
	}

	private void drawControlAlternatives() {
		String[] alternatives;
		if (yRegisterChosen)
			alternatives = new String[parent.getYRegisterSize()];
		else
			alternatives = new String[parent.getXRegisterSize()];
		for (int i = 0; i < alternatives.length; i++) {
			alternatives[i] = Integer.toString(i);
		}
		cNumberComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				alternatives));
	}

	private void writeMatrix() {
		axis = (String) axisComboBox.getSelectedItem();
		phiAsPartOfPi = phiComboBox.getSelectedIndex() + 1;
		if (axis.equals("x")) {
			jLabel11.setText("<html>cos(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
			jLabel12.setText("<html>-i sin(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
			jLabel21.setText("<html>-i sin(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
			jLabel22.setText("<html>cos(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
		} else if (axis.equals("y")) {
			jLabel11.setText("<html>cos(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
			jLabel12.setText("<html>-sin(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
			jLabel21.setText("<html>sin(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
			jLabel22.setText("<html>cos(<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ ")</html>");
		} else if (axis.equals("z")) {
			jLabel11.setText("<html>e<sup>-i<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ "</sup></html>");
			jLabel12.setText("<html>0</html>");
			jLabel21.setText("<html>0</html>");
			jLabel22.setText("<html>e<sup>i<i>&#960;</i>/" + 2 * phiAsPartOfPi
					+ "</sup></html>");
		}
	}

	private void setValues() {
		cancelButtonClicked = false;
		int i = 0;
		try {
			targetQubit = Integer.parseInt(targetTextField.getText());
			while (i < qubits.length - 1) {
				qubits[i] = Integer.parseInt(qubitTextField[i].getText());
				i++;
			}
			qubits[qubits.length - 1] = targetQubit;
			if (controlTargetIsPossible(qubits))
				setVisible(false);
			else {
				String message = bundle
						.getProperty("RotationDialog.errorMessage_2") + "!";
				JOptionPane.showMessageDialog(null, message);
			}
		} catch (Exception e) {
			String message = bundle
					.getProperty("RotationDialog.errorMessage_3")
					+ " "
					+ (i + 1);
			JOptionPane.showMessageDialog(null, message);
		}
	}

	private boolean controlTargetIsPossible(int[] qubits) {
		for (int i = 1; i < qubits.length; i++) {
			for (int j = 0; j < i; j++) {
				if (qubits[j] == qubits[i])
					return false;
			}
		}
		return true;
	}

	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt) {
		cancelButtonClicked = true;
		setVisible(false);
		removeAll();
		dispose();
	}

	/*
	 * public static void main(String args[]) {
	 * java.awt.EventQueue.invokeLater(new Runnable() { public void run() {
	 * String language = java.util.Locale.getDefault().getLanguage();
	 * java.util.Properties bundle = new java.util.Properties(); try {
	 * System.out.print("Try to load " + "/jquantum/Bundle_" + language +
	 * ".xml ...");
	 * bundle.loadFromXML(getClass().getResourceAsStream("/jquantum/Bundle_" +
	 * language + ".xml")); System.out.println(" successfully!"); }
	 * catch(Exception e) { try {
	 * bundle.loadFromXML(getClass().getResourceAsStream
	 * ("/jquantum/Bundle_en.xml"));
	 * System.out.println(" but loaded /jquantum/Bundle_en.xml!"); } catch
	 * (Exception e2) { e2.printStackTrace(); } } new RotationDialog(new
	 * jQuantum(), true, bundle).setVisible(true); //System.exit(0); } }); } //
	 */

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JComboBox axisComboBox;
	private javax.swing.JPanel axisPanel;
	private javax.swing.ButtonGroup buttonGroup;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JComboBox cNumberComboBox;
	private javax.swing.JLabel cNumberLabel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JLabel closeBracketLabel;
	private javax.swing.JPanel controlInputPanel;
	private javax.swing.JPanel controlInputPanel2;
	private javax.swing.JLabel dummyLabel;
	private javax.swing.JLabel eqLabel;
	private javax.swing.JPanel inputPanel;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel21;
	private javax.swing.JLabel jLabel22;
	private javax.swing.JPanel matrixPanel;
	private javax.swing.JButton okButton;
	private javax.swing.JLabel openBracketLabel;
	private javax.swing.JLabel openbracketLabel;
	private javax.swing.JComboBox phiComboBox;
	private javax.swing.JPanel qubitInputPanel;
	private javax.swing.JLabel rLabel;
	private javax.swing.JPanel rPanel;
	private javax.swing.JPanel radioPanel;
	private javax.swing.JPanel rotationPanel;
	private javax.swing.JPanel rotationPanel2;
	private javax.swing.JPanel rotationPanel3;
	private javax.swing.JPanel targetInputPanel;
	private javax.swing.JLabel targetLabel;
	private javax.swing.JTextField targetTextField;
	private javax.swing.JRadioButton xRadioButton;
	private javax.swing.JRadioButton yRadioButton;
	// End of variables declaration//GEN-END:variables
	private JLabel qubitLabel;
	private JPanel[] qubitPanel;
	private JTextField[] qubitTextField;
}
